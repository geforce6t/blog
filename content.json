{"pages":[],"posts":[{"title":"Week1","text":"WEEK 1: Finally the community bonding priod is over and the coding period began. In this blog I have loads of content and code to cover! ANALYSIS OF COMMUNITY BONDING PERIODIn the community bonding period there were mainly 2 objectives we had set : SETUP THE REACT APPLICATION WITH CI/CD. DESIGN THE APPLICATIONS WITH THE ENDPOINTS. Most of my community bonding period was spend on the CI/CD part. The major cause of this wascross-browser cross-platform testing integration with React, the tool which was planned to be used was saucelabs and unfortunately for me :(, there was no proper content regarding saucelabs integration with react to be found anywhere, I tried to make things work on my own and nearly succeeded testing on jest with snowpack and react, but snowpack could not resolve the dependencies inside the lh-toolkit-webcomponent monorepo when it was caching the files. Snowpack serves the application unbundled during development. Each file needs to be -built only once and then is cached forever. When a file changes, Snowpack rebuilds that single file As mainly we will be covering unit and integration testing, saucelabs will not be a neccessity as suggested by the saucelabs community. So I went on to setup the react app testing : using react-testing-library with jest, deployment : gitlab pages some eslint integration and git hooks. Design part was smooth sailing and offered many insights that I might have not noticed until later, upon the suggestion of my mentor I have also documented the api endpoints. I will drop the file with the designs and the endpoints here : https://geforce6t.github.io/blog/categories/EHR/ PROGRESS MADE IN THE WEEK the plan for the first coding week is to do the following: setup the application create home, login pages implement the checkin workflow monday: I started coding üéâÔ∏è , and completed the first part of the plan. tuesday: I started working on the project layout and accomplished the following : organize project into different directories including pages, components, redux store, redux slices etc added MUI with theme created login and auth pages with support for other workflows in mind. created redux auth workflow wednesday: looked for ways to style the lit-components‚Ä¶‚Ä¶‚Ä¶, lit components uses shadow dom and the style encaptulation feature make it a little tricky to style custom components from the outside, I made some hacks to do the same using callback refs inside the react component where the lit component resides,but this approach would not be optimal. Probably some minimal styles could be applied inside the lit components and would do great, anyhow I was able to style the material components using the global material css variables. One of the things that I need to look into is to add some style to the lit-components as a whole : ‚Äúmargin, broder shadow and stuff‚Äù, this won‚Äôt be a big issue as I have a lot of other components to create so mainly the style will be global and can be done anytime. So here is how the create-patient component has changed visually: compared to above, this is what we have as default: thursday: created the general search component. the general serach component is something that I would like to talk about. The general search component was actually little difficult thing to do, for different cases the search params, columns, query parameter may differ so to create a general purpose search component all of this features must be added as an attribute which was done in the implementation, the functions used in the seach component are one for search, based on fetching and storing the result after filtering the result to only include results for the columns using the query. another for storing pagination contexts: next page and previous page url, the most difficult part about the implementation was filtering results to form column enteries, the values that we may want can be nested one/many levels so it is very important to provide a query string to execute this filtering, it is not possible to pass this query string via props as it is inside a map method, so I created a function with switch case for different workflows that we will implement. finally the components looks like this : friday: wrote the edit and show patient code to complete the layout of the checkin worklfow üéâÔ∏è, but there was one issue that came across while creating the put request, for some of the fhir components the values are not changing even after visually their value is changed, this might be an issue in the react app or the wc repo. I will take a look and solve this issue in the coming days! UPCOMING DAYS add event handlers for the create patient page. debug the value not changing issue while making a put request. add css for element (not compulsary for now) thanks for reading till the end ‚ù§Ô∏è , see you next week üòÑ","link":"/blog/2021/06/11/Week1/"},{"title":"Week2","text":"WEEK 2: Hello folks! Another week done and another batch of code written and merged !! In the coming sections I‚Äôll explain the details of this week. PROGRESS MADE THIS WEEKIn the previous week, I had implemented the checkin workflow in the react application. According to my plan in the proposal, this week was to be used to create components for the resources that will be used in the Appointment workflow. the resources are: Slot Schedule Appointment In the beginning of the week, I started looking into the lit project: upon which the components are based. I read the documentation and decided how to create the components so that they can be utilised for different CRUD operations. I also noticed a few bugs in the components while implementing the checkin workflow, for this I created a MR and fixed them. By wednesday I started creating the components. Most of the components that will be created have a reference or codeable-concept property datatype, hence creation of components that can be used in different contexts to implement the mentioned datatypes will help a lot. By the end of wednesday I had created these datatype components. Once these components were created, the resource components were not difficult to develop. By thursday I had created Slot-Schedule and by friday Appointment. During this period my mentor noticed a few bugs in the project: inconsistent label case use unavailable demo files (build issue) So along with the development of the components, I made a couple of commits for these issues as well. Template used for component creation:As a component will be used for CREATE / GET / PUT request , I made it compatible with everything. For the create part, inside the constructor an initial empty skeleton value was provided. This value property would be overwritten if the component contains the value attribute. Hence this supports both the cases of create and get operations as a user can avoid the value attribute if the intention is to use the component for creating entries and provide a value after fetching a specific endpoint if the intent is to show entries. Moreover even if a value property is provided and some of the keys are missing, the component will still remain the same as I have done a check for individual property existence and default value allocation as well, this feature will be helpful for the edit operation. here is the default value property set inside the Appointment component constructor. Similar structure is used in the other 2 components. 1234567891011121314{ identifier: [{}], status: '', serviceCategory: [{coding: [{ system: &quot;&quot;, code: &quot;&quot;, display: &quot;&quot;}],text: &quot;&quot;}], serviceType: [{coding: [{ system: &quot;&quot;, code: &quot;&quot;, display: &quot;&quot;}],text: &quot;&quot;}], specialty: [{coding: [{ system: &quot;&quot;, code: &quot;&quot;, display: &quot;&quot;}],text: &quot;&quot;}], appointmentType: {coding: [{ system: &quot;&quot;, code: &quot;&quot;, display: &quot;&quot;}],text: &quot;&quot;}, slot: [{reference: &quot;&quot;, display: &quot;&quot;, type: &quot;&quot;}], comment: '', start: moment().format('YYYY-MM-DDThh:mm:ss[Z]'), end: moment().format('YYYY-MM-DDThh:mm:ss[Z]'), participant: [{type: [{coding: [{ system: &quot;&quot;, code: &quot;&quot;, display: &quot;&quot;}],text: &quot;&quot;}], status: '', actor: {reference: &quot;&quot;, display: &quot;&quot;, type: &quot;&quot;}}] } here are the screenshots of the implemented components: upcoming days: write unit test for the components. thanks for reading till the end ‚ù§Ô∏è , see you next week üòÑ","link":"/blog/2021/06/19/Week2/"},{"title":"community-bonding","text":"Hello ! Its been quite a while since the GSoC results were announced and community bonding period commenced. The calendar says May 30 and the coding period will begin in about 10 days. So lets move on to how I actually spent the community bonding period yet and what plans do I have for the coming days before the coding period starts. Project IntroductionThe project bases its goal on creating an EHR system using the webcomponents implementing FHIR resources developed during the previous versions of GSoC. For the implementation some new resource based components will be required as well which will be created simultaneously. During GSoC 2018, under this project a polymer application was developed which combined all the web component0s (developed at that time) into a PWA. The current project will be built upon this application by adding and implementing workflows. the workflows that will be implemented in the EHR are : Check-in Visit e-Prescription Appointment Lab orders Amazing Mentor Team Saptarshi Purkayastha Namratanehete Community Bonding PeriodBackgroundDuring the application period upon the suggestions of the mentors I had decided to mainly work on the CI and the Designs of the PWA during the community bonding period. Even before the results were announced I was already experimenting with setting up the project so as to identify any problems that may occur as using lit-components inside React can be a little trouble because React never exposes the real DOM. Bonding PeriodSo as soon as the results were released I started looking on these parts. I started with the CI part first, one of the pointers in this was also to look for a cross platform - cross browser testing method (SauceLabs) suggested by my mentor. I looked at some of the possibe integrations with these automation tools here. But most of these are based on e2e testing ( cypress , Puppeteer and others ) and our main focus is on unit and integration testing which will require the react component to be mounted and tested , for which many tools are available but I could not find their integration with sauce or any cross browser-cross platform tool. Once I figure out a way for this issue the CI part will hardly take any time ! the design part:I have designed one workflow ( check-in ) and will complete the remaining in the coming 2-3 days ! adding to these I will document the endpoints that will be used in each steps in the designed workflows. The endpoints of the check-in workflow is provided below. here is the video of the designed check-in workflow: check-in.mp4 from Shashwat on Vimeo. CHECK-IN WORKFLOW :SEARCH PARAMS :GET [base]/Patient?identifier=[value] GET [base]/Patient?name=[value] CREATE PATIENT :POST [base]/Patient GET PATIENT :GET [base]/Patient/[_id] ConclusionThis week‚Äôs blog was not too long as I have not written any code, but hoping to deliver some interesting content in the upcoming weeks! I will be posting a blog every week highlighting the things I completed during the week and the things that I plan to achieve. See you next week üòÑ","link":"/blog/2021/05/29/community-bonding/"},{"title":"ehr_endpoints","text":"CHECK-IN WORKFLOW : Valid search parameters for this search are: [_id, _language, _lastUpdated, active, address, address-city, address-country, address-postalcode, address-state, address-use, birthdate, death-date, deceased, email, family, gender, general-practitioner, given, identifier, language, link, name, organization, phone, phonetic, telecom]` SEARCH PARAMS :GET [base]/Patient?identifier=[value] GET [base]/Patient?name=[value] CREATE PATIENT :POST [base]/Patient GET PATIENT :GET [base]/Patient/[_id] EDIT PATIENT :PUT [base]/Patient/[_id] check-in.mp4 from Shashwat on Vimeo. APPOINTMENT WORKFLOW : SCHEDULE TAB Valid search parameters for this search are: [_id, _language, _lastUpdated, active, actor, date, identifier, service-category, service-type, specialty]` SEARCH PARAMS :GET [base]/Schedule?actor=Practitioner/[value]GET [base]/Schedule?actor=Location/[value]GET [base]/Schedule?actor=Patient/[value] GET [base]/Schedule?service-category=[value] CREATE SCHEDULE :POST [base]/Schedule GET SCHEDULE :GET [base]/Schedule/[_id] EDIT SCHEDULE :PUT [base]/Schedule/[_id] SLOT TAB Valid search parameters for this search are: [_id, _language, _lastUpdated, appointment-type, identifier, schedule, service-category, service-type, specialty, start, status]` SEARCH PARAMS :GET [base]/Slot?status=[value]GET [base]/Slot?schedule=[value] CREATE SLOT :POST [base]/Slot GET SLOT :GET [base]/Slot/[_id] EDIT SLOT :PUT [base]/Slot/[_id] APPOINTMENT TAB Valid search parameters for this search are: [_id, _language, _lastUpdated, actor, appointment-type, based-on, date, identifier, location, part-status, patient, practitioner, reason-code, reason-reference, service-category, service-type, slot, specialty, status, supporting-info]‚Äù` SEARCH PARAMS :GET [base]/Appointment?actor=[value]GET [base]/Appointment?status=[value] CREATE APPOINTMENT :POST [base]/Appointment GET APPOINTMENT :GET [base]/Appointment/[_id] EDIT APPOINTMENT :PUT [base]/Appointment/[_id] ` VISIT WORKFLOW:///////////////////////////////////////////////NURSE/////////////////////////////////////////////// FIND PATIENT: SEARCH PARAMS :GET [base]/Patient?identifier=[value]GET [base]/Patient?name=[value] once the nurse selects a specific patient the patient Id will bestored by a redux action. So the patient id below will be fetched fromthe redux store via a useselector hook to get the appointments and theencounters related to a specifc Patient entry. APPOINTMENTS RELATED TO THE PATIENT:GET [base]/Appointment?actor=Patient/[_id] ENCOUNTER RELATED TO THE PATIENT:GET [base]/Encounter?subject=Patient/[_id] /* TO GET ALL THE ENCOUNTERS SPECIFIC TO A PATIENT */ POST [base]/Encounter /* TO CREATE AN ENCOUNTER */ PUT [base]/Encounter/[_id] ALLERGY RELATED TO THE PATIENT:GET [base]/AllergyIntolerance?patient=Patient/[_id] POST [base]/AllergyIntolerance /* TO CREATE AN ALLERGY ENTRY FOR THE PATIENT */ MEDICATIONS THE PATIENT IS TAKING/HAS TAKEN: the fhir resource used here is MedicationStatement : this resourcehas a reference to the patient, this resource is required to know what medications thepatient has been taking / taken before. GET [base]/MedicationStatement?subject=Patient/[_id] POST [base]/MedicationStatement /* TO CREATE A MEDICATION-STATEMENT ENTRY FOR THE PATIENT */ PATIENT VITALS: IN FHIR THERE IS NO SEPARATE RESOURCE FOR VITALS , VITALS CAN BE TAKENAS AN ENTRY OF OBSERVATION RESOURCE UNDER THE CATEGORY OF VITAL-SIGNS GET [base]/Observation?category=vital-signs&amp;subject=Patient/[_id] POST [base]/Observation /* TO CREATE AN OBSERVATION ENTRY FOR THE PATIENT VITALS */ PUT [base]/Observation/[_id] /* TO EDIT OBSERVATION ENTRY FOR THE PATIENT VITALS */ /////////////////////////////////////////PROVIDER///////////////////////////////////////// FIND PATIENT: SEARCH PARAMS :GET [base]/Patient?identifier=[value]GET [base]/Patient?name=[value] once the provider selects a specific patient the patient Id will bestored by a redux action. So the patient id below will be fetched fromthe redux store via a useselector hook to get theencounters related to a specifc Patient entry. ENCOUNTER RELATED TO THE PATIENT:GET [base]/Encounter?subject=Patient/[_id] /* TO GET ALL THE ENCOUNTERS SPECIFIC TO A PATIENT */ PUT [base]/Encounter/[_id] similar to the above case once an encounter is selected its id will be stored via redux store OBSERVATION RELATED TO THE PATIENT IN THE CURRENT ENCOUNTER:GET [base]/Observation?encounter=Encounter/[_id] POST [base]/Observation ORDERS RELATED TO THE PATIENT IN THE CURRENT ENCOUNTER:*GET [base]/ServiceRequest?encounter=Encounter/[_id] POST [base]/ServiceRequest E-PRESCRIPTION WORKFLOW:////////////////////////////////////////////PRESCRIBER////////////////////////////////////////// FIND PATIENT: SEARCH PARAMS :GET [base]/Patient?identifier=[value]GET [base]/Patient?name=[value] once the nurse selects a specific patient the patient Id will bestored by a redux action. So the patient id below will be fetched fromthe redux store via a useselector hook to get theencounters related to a specifc Patient entry. ENCOUNTER RELATED TO THE PATIENT:GET [base]/Encounter?subject=Patient/[_id] /* TO GET ALL THE ENCOUNTERS SPECIFIC TO A PATIENT */ PUT [base]/Encounter/[_id] similar to the above case once an encounter is selected its id will be stored via redux store ALLERGY RELATED TO THE PATIENT:GET [base]/AllergyIntolerance?patient=Patient/[_id] MEDICATIONS THE PATIENT IS TAKING/HAS TAKEN: the fhir resource used here is MedicationStatement : this resourcehas a reference to the patient, this resource is required to know what medications thepatient has been taking / taken before. GET [base]/MedicationStatement?subject=Patient/[_id] MEDICATIONS PRESCRIPTION: the fhir resource used here is MedicationRequest POST [base]/MedicationRequest","link":"/blog/2021/06/02/ehr-endpoints/"}],"tags":[{"name":"GSoC21","slug":"GSoC21","link":"/blog/tags/GSoC21/"}],"categories":[{"name":"LibreHealth","slug":"LibreHealth","link":"/blog/categories/LibreHealth/"},{"name":"EHR","slug":"EHR","link":"/blog/categories/EHR/"}]}